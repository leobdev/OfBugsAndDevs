@page "/admin/dashboard"
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.BarChart
@inject IBlogPostService BlogPostService
@inject ICategoryService CategoryService
@inject ISubscribeService SubscribeService
@rendermode @(new InteractiveServerRenderMode(prerender: false))


@layout AdminLayout

<AdminHeader Title="Dashboard" />

<div class="container">
    <div class="row">
        <div class="col-6">
            <ChartJs.Blazor.Chart Config="_postsPieConfig" />

        </div>
        <div class="col-6">
            <ChartJs.Blazor.Chart Config="_categoryPieConfig" />

        </div>
    </div>
    <div class="row">
        <di class="col">
            <ChartJs.Blazor.Chart Config="_subscribersPieConfig" />
        </di>
    </div>
</div>



@code {
    private PieConfig? _postsPieConfig;
    private PieConfig? _categoryPieConfig;
    private PieConfig? _subscribersPieConfig;

    protected override async Task OnInitializedAsync()
    {
        await LoadChartDataAsync();

    }

    // After fetching your data, add it to the charts in LoadChartDataAsync()

    private async Task LoadChartDataAsync()
    {
        _postsPieConfig = new PieConfig();
        _categoryPieConfig = new PieConfig();
        _subscribersPieConfig = new PieConfig();

        _postsPieConfig.Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Most Viewed Post"
                }
            };


        _categoryPieConfig.Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Most Popular Category"
                }
            };



        _subscribersPieConfig.Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Subscribers Count Per Month"
                }
            };

        var posts = await BlogPostService.GetAllPostsAsync();


        PieDataset<int> postDataset = new()
            {
                BackgroundColor = new[]
                {
                ColorUtil.ColorHexString(255, 0, 0),
                ColorUtil.ColorHexString(0, 255, 0),
                ColorUtil.ColorHexString(0, 0, 255),
                ColorUtil.ColorHexString(0, 0, 250)
                }
            };

        foreach (var post in posts)
        {
            _postsPieConfig.Data.Labels.Add(post.Title);
            //postDataset.BackgroundColor = ColorUtil.RandomColorString();
            postDataset.Add(post.ViewCount);
        }
        _postsPieConfig.Data.Datasets.Add(postDataset);

        foreach (var city in new[] { "City 1", "City 2", "City 3" })
        {
            PieDataset<int> dataset = new();
            _categoryPieConfig.Data.Labels.Add(city);
        }

        foreach (var city in new[] { "City 1", "City 2", "City 3" })
        {
            _subscribersPieConfig.Data.Labels.Add(city);
        }

        // var postsDataSet = new PieDataset<int>(new[] { 35, 50, 15 })
        //     {
        //         BackgroundColor = new[]
        //                             {
        //         ColorUtil.ColorHexString(255, 0, 0),
        //         ColorUtil.ColorHexString(0, 255, 0),
        //         ColorUtil.ColorHexString(0, 0, 255)
        //         }
        //     };




        // _postsPieConfig.Data.Datasets.Add(postsDataSet);


    }


    // protected override void OnAfterRender(bool firstRender)
    // {
    //     if (firstRender && !_isInitialized)
    //     {
    //         // Update charts after the first render and JavaScript interop is available


    //         _isInitialized = true; // Ensure this happens only once
    //     }

    // }


}
