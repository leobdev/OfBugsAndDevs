@page "/admin/dashboard"
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.BarChart
@inject IBlogPostService BlogPostService
@inject ICategoryService CategoryService
@inject ISubscribeService SubscribeService
@rendermode @(new InteractiveServerRenderMode(prerender: false))


@layout AdminLayout

<AdminHeader Title="Dashboard" />

<div class="container">
    <div class="row">
        <div class="col-6">
            <ChartJs.Blazor.Chart Config="_postsPieConfig" />

        </div>
        <div class="col-6">
            <ChartJs.Blazor.Chart Config="_categoryPieConfig" />

        </div>
    </div>
    <div class="row">
        <di class="col-10">
            <ChartJs.Blazor.Chart Config="_subscribersBarConfig" />
        </di>
    </div>
</div>



@code {
    private PieConfig? _postsPieConfig;
    private PieConfig? _categoryPieConfig;
    private BarConfig? _subscribersBarConfig;

    protected override async Task OnInitializedAsync()
    {
        await LoadChartDataAsync();

    }

    // After fetching your data, add it to the charts in LoadChartDataAsync()

    private async Task LoadChartDataAsync()
    {
        _postsPieConfig = new PieConfig();
        _categoryPieConfig = new PieConfig();
        _subscribersBarConfig = new BarConfig();

        _postsPieConfig.Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Most Viewed Post"
                },

            };


        _categoryPieConfig.Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Most Popular Category"
                }
            };



        _subscribersBarConfig.Options = new BarOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Subscribers Count Per Month"
                },
                Scales = new BarScales
                {
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                             Ticks = new LinearCartesianTicks
                             {
                                 BeginAtZero = true
                             }
                        }
                    }
                },
                Legend = new Legend
                {
                    Display = false
                }

            };

        var posts = await BlogPostService.GetAllPostsAsync();

        var categories = await CategoryService.GetCategoriesAsync();
        var categoryViewCounts = posts
                                .GroupBy(b => b.CategoryID)
                                .Select(g => new
                                {
                                    CategoryID = g.Key,
                                    ViewCount = g.Sum(b => b.ViewCount)
                                })
                                .OrderByDescending(g => g.ViewCount)
                                .ToList();

        PieDataset<int> postDataset = new()
            {
                BackgroundColor = new[]
                {
                ColorUtil.ColorHexString(160,177,197),
                ColorUtil.ColorHexString(217,217,217),
                ColorUtil.ColorHexString(58,76,117),
                ColorUtil.ColorHexString(156,138,222),
                ColorUtil.ColorHexString(168,224,193)
    }
            };

        foreach (var post in posts.OrderByDescending(p => p.ViewCount).Take(5))
        {
            _postsPieConfig.Data.Labels.Add(post.Title);
            postDataset.Add(post.ViewCount);
        }
        _postsPieConfig.Data.Datasets.Add(postDataset);

        PieDataset<int> categoryDataset = new()
            {
                BackgroundColor = new[]
        {
            ColorUtil.ColorHexString(160,177,197),
            ColorUtil.ColorHexString(217,217,217),
            ColorUtil.ColorHexString(58,76,117),
            ColorUtil.ColorHexString(156,138,222),
            ColorUtil.ColorHexString(168,224,193)
    }
            };

        foreach (var categoryView in categoryViewCounts)
        {
            var category = categories.FirstOrDefault(c => c.CategoryID == categoryView.CategoryID);
            if (category != null)
            {
                _categoryPieConfig.Data.Labels.Add(category.CategoryName);
                categoryDataset.Add(categoryView.ViewCount);
            }
        }

        // Add the dataset to the pie chart
        _categoryPieConfig.Data.Datasets.Add(categoryDataset);



        var subscribersList = (await SubscribeService.GetSubscribersAsync()).records.ToList();

        var groupedSubscribers = subscribersList
            .GroupBy(s => new { s.SSubscribedOn.Year, s.SSubscribedOn.Month })
            .Select(g => new
            {
                MonthYear = new DateTime(g.Key.Year, g.Key.Month, 1),
                Count = g.Count()
            })
            .OrderBy(g => g.MonthYear)
            .ToList();


        BarDataset<int> subscriberDataset = new()
            {
                BackgroundColor = new[]
                {
                    ColorUtil.ColorHexString(160,177,197),
                    ColorUtil.ColorHexString(217,217,217),
                    ColorUtil.ColorHexString(58,76,117),
                    ColorUtil.ColorHexString(156,138,222),
                    ColorUtil.ColorHexString(168,224,193)
            }
            };
        foreach (var group in groupedSubscribers)
        {
            _subscribersBarConfig.Data.Labels.Add(group.MonthYear.ToString("MMM yyyy"));
            subscriberDataset.Add(group.Count);
        }

        _subscribersBarConfig.Data.Datasets.Add(subscriberDataset);

    }

}
