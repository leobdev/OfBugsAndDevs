@page "/admin/manage-categories"
@using Microsoft.AspNetCore.Components.QuickGrid
@using OfBugsAndDevs.Data.Entities
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode @(new InteractiveServerRenderMode(prerender: false))


<AdminHeader Title="Manage Categories">
    <ActionButtons>
        <button type="button" class="btn btn-sm btn-outline-primary" @onclick="() => _operatingCategory = new()">+ Add new Category</button>
    </ActionButtons>
</AdminHeader>

@if (_isLoading)
{
    <Loader LoaderText="@_loadingText" />
}

@if (_operatingCategory is not null)
{

    <div class="row">
        <div class="col-sm-6"></div>
        <div class="col-sm-6">
            <EditForm Model="_operatingCategory" OnValidSubmit="SaveCategoryAsync">
                <DataAnnotationsValidator />
                <div class="shadow p-3" style="display: grid; grid-template-columns: auto 150px; grid-column-gap: 15px">
                    <div>
                        <label class="form-label">Category Name</label>
                        <InputText @bind-Value="_operatingCategory.CategoryName" class="form-control form-control-sm" placeholder="Category Name" />
                        <ValidationMessage For="() => _operatingCategory.CategoryName" />
                        <label class="form-label mt-2">
                            <InputCheckbox @bind-Value="_operatingCategory.ShowOnNavBar" />
                            Show on Navbar
                        </label>
                    </div>
                    <div class="d-flex flex-column">
                        <button type="submit" class="btn btn-sm btn-outline-primary mb-2">Save</button>
                        <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => _operatingCategory = null">Cancel</button>
                    </div>
                </div>
            </EditForm>
        </div>

    </div>
}

<QuickGrid Items="@_categories" Pagination="_paginationState" Class="table table-bordered table-striped table-hover">
    <PropertyColumn Title="ID" Property="@(c => c.CategoryID)" />
    <PropertyColumn Title="Category Name" Property="@(c => c.CategoryName)" />
    <PropertyColumn Property="@(c => c.Slug)" />
    <TemplateColumn Title="Show on Navbar">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" role="switch" @bind="context.ShowOnNavBar" @bind:after="() => HandleShowOnNavbarChange(context)" />
        </div>
    </TemplateColumn>
    <TemplateColumn>
        <button type="button" class="btn btn-sm btn-outline-primary" @onclick="() => HandleEditCategory(context)">Edit</button>
        <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => OpenDeleteModal(context)">Delete</button>
    </TemplateColumn>
</QuickGrid>
<Paginator State="_paginationState" />


@if (_showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this category?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">No</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Yes, Delete</button>
                </div>
            </div>
        </div>
    </div>
}



@code {
    private bool _isLoading;
    private string? _loadingText;
    private IQueryable<Category> _categories = Enumerable.Empty<Category>().AsQueryable();
    private Category? _operatingCategory;
    private bool _showDeleteModal = false;
    private Category? _categoryToDelete;
    private const int PagedSize = 10;
    private PaginationState _paginationState = new PaginationState
        {
            ItemsPerPage = PagedSize
        };

    protected override async Task OnInitializedAsync() => await LoadCategoriesAsync();


    private async Task LoadCategoriesAsync()
    {
        _loadingText = "Fetching categories...";
        _isLoading = true;
        _categories = (await CategoryService.GetCategoriesAsync()).AsQueryable();
        _isLoading = false;

    }

    private async Task HandleShowOnNavbarChange(Category category)
    {
        await CategoryService.SaveCategoryAsync(category);
    }

    private void HandleEditCategory(Category category) => _operatingCategory = category.Clone();

    private async Task SaveCategoryAsync()
    {
        if (_operatingCategory is not null)
        {
            _loadingText = "Saving changes...";
            _isLoading = true;
            await CategoryService.SaveCategoryAsync(_operatingCategory);
            _operatingCategory = null;
            _isLoading = false;

            await LoadCategoriesAsync();
        }
    }


    private void OpenDeleteModal(Category category)
    {
        _categoryToDelete = category;
        _showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        _showDeleteModal = false;
        _categoryToDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (_categoryToDelete != null)
        {
            _isLoading = true;
            _loadingText = "Deleting category...";
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userID = authState.User.GetUserId();

            // Call your service to delete the blog post
            await CategoryService.DeleteCategoryAsync(_categoryToDelete.CategoryID, userID);

            _isLoading = false;
            _showDeleteModal = false;
            await LoadCategoriesAsync();
            // Refresh the grid
            _paginationState = new PaginationState { ItemsPerPage = PagedSize };
        }
    }

    



}
